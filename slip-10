Slip 10
Q1. Write a program to accept a number from user. Check whether number is prime or not.
:-
 import java.util.Scanner;

public class Primechecker {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a number: ");
        int number = scanner.nextInt();

        if (isPrime(number)) {
            System.out.println(number + " is a prime number.");
        } else {
            System.out.println(number + " is not a prime number.");
        }

        scanner.close();
    }

    // Function to check if a number is prime
    public static boolean isPrime(int number) {
        if (number <= 1) {
            return false;
        }

        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) {
                return false;
            }
        }

        return true;
    }
}








Q2. Create a package “utility”. Define a class CapitalString under “utility” package which will contain
a method to return String with first letter capital. Create a Person class (members – name, city)
outside the package. Display the person name with first letter as capital by making use of
CapitalString.
:-



package utility;
public class CapitalString {
    public static String capitalizeFirstLetter(String input) {
        if (input == null || input.isEmpty()) {
            return input;
        }

        return input.substring(0, 1).toUpperCase() + input.substring(1);
    }
}

import utility.CapitalString;
 class main
{
    public static void main(String[] args) {
        Person person=new Person("john","New York");

        String capitalizedName=CapitalString.capitalizeFirstLetter(person.getName());

        System.out.println("Persons Name:- "+capitalizedName);
        System.out.println("Persons city:- "+person.getCity());
    }
}
public class Person {
    private String name;
    private String city;

    public Person(String name, String city) {
        this.name = name;
        this.city = city;
    }

    public String getName() {
        return name;
    }

    public String getCity() {
        return city;
    }
}

                                                       





OR




Q2. Define a class SavingAccount (acno, name, balance). Define appropriate operations as, withdraw(), deposit(), and viewbalance(). The minimum balance must be 500. Create an objectand
perform operation. Raise user defined ―InsufficientFundException when balance is notsufficient
for withdraw operation.